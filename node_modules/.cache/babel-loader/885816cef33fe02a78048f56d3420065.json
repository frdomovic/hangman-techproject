{"ast":null,"code":"const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"newuser\":\n      return state = action.payload;\n\n    default:\n      return state;\n  }\n};\n\nconst mstreducer = function () {\n  let state1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"INCREMENT\":\n      return state = state + 1;\n\n    case \"RESET\":\n      return state = 0;\n  }\n};\n\nconst guesses = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Set([]);\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"CORRECT\":\n      return state.add(action.payload);\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/state/reducers/reducer.js"],"names":["reducer","state","action","type","payload","mstreducer","state1","guesses","Set","add"],"mappings":"AAAA,MAAMA,OAAO,GAAG,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAQF,KAAK,GAAGC,MAAM,CAACE,OAAvB;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPD;;AAQA,MAAMI,UAAU,GAAG,YAAwB;AAAA,MAAvBC,MAAuB,uEAAd,CAAc;AAAA,MAAXJ,MAAW;;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAQF,KAAK,GAAGA,KAAK,GAAG,CAAxB;;AACF,SAAK,OAAL;AACE,aAAQA,KAAK,GAAG,CAAhB;AAJJ;AAMD,CAPD;;AASA,MAAMM,OAAO,GAAG,YAA6B;AAAA,MAA5BN,KAA4B,uEAApBO,GAAG,CAAC,EAAD,CAAiB;AAAA,MAAXN,MAAW;;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,aAAOF,KAAK,CAACQ,GAAN,CAAUP,MAAM,CAACE,OAAjB,CAAP;AAFJ;AAID,CALD;;AAMA,eAAeJ,OAAf","sourcesContent":["const reducer = (state = \"\", action) => {\n  switch (action.type) {\n    case \"newuser\":\n      return (state = action.payload);\n    default:\n      return state;\n  }\n};\nconst mstreducer = (state1 = 0, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return (state = state + 1);\n    case \"RESET\":\n      return (state = 0);\n  }\n};\n\nconst guesses = (state = Set([]), action) => {\n  switch (action.type) {\n    case \"CORRECT\":\n      return state.add(action.payload);\n  }\n};\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}