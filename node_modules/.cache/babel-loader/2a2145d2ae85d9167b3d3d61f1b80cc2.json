{"ast":null,"code":"import axios from \"axios\";\nimport { FETCH_QUOTE_FAILURE, FETCH_QUOTE_SUCCESS, FETCH_QUOTE_REQUEST, SET_PLAYER_USERNAME, ADD_NEW_GUESS, INCREMENT_MISSTAKE, RESET_GAME_AND_DATA } from \"./userTypes\";\nconst api = axios.create({\n  baseURL: \"http://api.quotable.io/random\"\n}); //it not pure , changes within the api\n\nexport const fetchQuote = () => {\n  return dispatch => {\n    dispatch(fetchQuoteRequest());\n    api.get().then(res => {\n      const data = res.data;\n      dispatch(fetchQuoteSuccess(data));\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchQuoteFailure(errorMsg));\n    });\n  };\n};\n\nconst fetchQuoteRequest = () => {\n  return {\n    type: FETCH_QUOTE_REQUEST\n  };\n};\n\nconst fetchQuoteSuccess = quoteData => {\n  return {\n    type: FETCH_QUOTE_SUCCESS,\n    payload: quoteData\n  };\n};\n\nconst fetchQuoteFailure = error => {\n  return {\n    type: FETCH_QUOTE_FAILURE,\n    payload: error\n  };\n};\n\nconst setupUsername = username => {\n  return {\n    type: SET_PLAYER_USERNAME,\n    payload: username\n  };\n};\n\nconst addNewGuess = letter => {\n  return {\n    type: ADD_NEW_GUESS,\n    payload: letter\n  };\n};\n\nconst incrementMisstake = value => {\n  return {\n    type: INCREMENT_MISSTAKE,\n    payload: value\n  };\n};\n\nconst resetGame = () => {\n  return {\n    type: RESET_GAME_AND_DATA\n  };\n};\n\nexport const changeUser = username => {\n  return dispatch => {\n    dispatch(setupUsername(username));\n  };\n};\nexport const addGuess = letter => {\n  return dispatch => {\n    dispatch(addNewGuess(letter));\n  };\n};\nexport const addMisstake = value => {\n  return dispatch => {\n    dispatch(incrementMisstake(value));\n  };\n};\nexport const resetGameAndData = value => {\n  return dispatch => {\n    dispatch(resetGame());\n  };\n};","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/redux/user/userActions.js"],"names":["axios","FETCH_QUOTE_FAILURE","FETCH_QUOTE_SUCCESS","FETCH_QUOTE_REQUEST","SET_PLAYER_USERNAME","ADD_NEW_GUESS","INCREMENT_MISSTAKE","RESET_GAME_AND_DATA","api","create","baseURL","fetchQuote","dispatch","fetchQuoteRequest","get","then","res","data","fetchQuoteSuccess","catch","error","errorMsg","message","fetchQuoteFailure","type","quoteData","payload","setupUsername","username","addNewGuess","letter","incrementMisstake","value","resetGame","changeUser","addGuess","addMisstake","resetGameAndData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,aALF,EAMEC,kBANF,EAOEC,mBAPF,QAQO,aARP;AAUA,MAAMC,GAAG,GAAGR,KAAK,CAACS,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAE;AADc,CAAb,CAAZ,C,CAIA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR;AACAL,IAAAA,GAAG,CACAM,GADH,GAEGC,IAFH,CAESC,GAAD,IAAS;AACb,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACAL,MAAAA,QAAQ,CAACM,iBAAiB,CAACD,IAAD,CAAlB,CAAR;AACD,KALH,EAMGE,KANH,CAMUC,KAAD,IAAW;AAChB,YAAMC,QAAQ,GAAGD,KAAK,CAACE,OAAvB;AACAV,MAAAA,QAAQ,CAACW,iBAAiB,CAACF,QAAD,CAAlB,CAAR;AACD,KATH;AAUD,GAZD;AAaD,CAdM;;AAeP,MAAMR,iBAAiB,GAAG,MAAM;AAC9B,SAAO;AACLW,IAAAA,IAAI,EAAErB;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMe,iBAAiB,GAAIO,SAAD,IAAe;AACvC,SAAO;AACLD,IAAAA,IAAI,EAAEtB,mBADD;AAELwB,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMF,iBAAiB,GAAIH,KAAD,IAAW;AACnC,SAAO;AACLI,IAAAA,IAAI,EAAEvB,mBADD;AAELyB,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALD;;AAMA,MAAMO,aAAa,GAAIC,QAAD,IAAc;AAClC,SAAO;AACLJ,IAAAA,IAAI,EAAEpB,mBADD;AAELsB,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALD;;AAMA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,SAAO;AACLN,IAAAA,IAAI,EAAEnB,aADD;AAELqB,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID,CALD;;AAMA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnC,SAAO;AACLR,IAAAA,IAAI,EAAElB,kBADD;AAELoB,IAAAA,OAAO,EAAEM;AAFJ,GAAP;AAID,CALD;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACtB,SAAO;AACLT,IAAAA,IAAI,EAAEjB;AADD,GAAP;AAGD,CAJD;;AAMA,OAAO,MAAM2B,UAAU,GAAIN,QAAD,IAAc;AACtC,SAAQhB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACe,aAAa,CAACC,QAAD,CAAd,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMO,QAAQ,GAAIL,MAAD,IAAY;AAClC,SAAQlB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACiB,WAAW,CAACC,MAAD,CAAZ,CAAR;AACD,GAFD;AAGD,CAJM;AAKP,OAAO,MAAMM,WAAW,GAAIJ,KAAD,IAAW;AACpC,SAAQpB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACmB,iBAAiB,CAACC,KAAD,CAAlB,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMK,gBAAgB,GAAIL,KAAD,IAAW;AACzC,SAAQpB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACqB,SAAS,EAAV,CAAR;AACD,GAFD;AAGD,CAJM","sourcesContent":["import axios from \"axios\";\nimport {\n  FETCH_QUOTE_FAILURE,\n  FETCH_QUOTE_SUCCESS,\n  FETCH_QUOTE_REQUEST,\n  SET_PLAYER_USERNAME,\n  ADD_NEW_GUESS,\n  INCREMENT_MISSTAKE,\n  RESET_GAME_AND_DATA,\n} from \"./userTypes\";\n\nconst api = axios.create({\n  baseURL: \"http://api.quotable.io/random\",\n});\n\n//it not pure , changes within the api\nexport const fetchQuote = () => {\n  return (dispatch) => {\n    dispatch(fetchQuoteRequest());\n    api\n      .get()\n      .then((res) => {\n        const data = res.data;\n        dispatch(fetchQuoteSuccess(data));\n      })\n      .catch((error) => {\n        const errorMsg = error.message;\n        dispatch(fetchQuoteFailure(errorMsg));\n      });\n  };\n};\nconst fetchQuoteRequest = () => {\n  return {\n    type: FETCH_QUOTE_REQUEST,\n  };\n};\n\nconst fetchQuoteSuccess = (quoteData) => {\n  return {\n    type: FETCH_QUOTE_SUCCESS,\n    payload: quoteData,\n  };\n};\n\nconst fetchQuoteFailure = (error) => {\n  return {\n    type: FETCH_QUOTE_FAILURE,\n    payload: error,\n  };\n};\nconst setupUsername = (username) => {\n  return {\n    type: SET_PLAYER_USERNAME,\n    payload: username,\n  };\n};\nconst addNewGuess = (letter) => {\n  return {\n    type: ADD_NEW_GUESS,\n    payload: letter,\n  };\n};\nconst incrementMisstake = (value) => {\n  return {\n    type: INCREMENT_MISSTAKE,\n    payload: value,\n  };\n};\nconst resetGame = () => {\n  return {\n    type: RESET_GAME_AND_DATA,\n  };\n};\n\nexport const changeUser = (username) => {\n  return (dispatch) => {\n    dispatch(setupUsername(username));\n  };\n};\n\nexport const addGuess = (letter) => {\n  return (dispatch) => {\n    dispatch(addNewGuess(letter));\n  };\n};\nexport const addMisstake = (value) => {\n  return (dispatch) => {\n    dispatch(incrementMisstake(value));\n  };\n};\n\nexport const resetGameAndData = (value) => {\n  return (dispatch) => {\n    dispatch(resetGame());\n  };\n};\n"]},"metadata":{},"sourceType":"module"}