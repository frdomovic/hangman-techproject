{"ast":null,"code":"var _jsxFileName = \"/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport UserSetup from \"./UserSetup\";\nimport { images } from \"./images/images\";\nimport { connect } from \"react-redux\";\nimport { fetchQuote, addGuess, addMisstake, resetGameAndData, updateScore, updateTime } from \"../redux/user/userActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HangmanLogic(_ref) {\n  _s();\n\n  let {\n    userData,\n    fetchQuote,\n    addGuess,\n    addMisstake,\n    resetGameAndData,\n    updateScore,\n    updateTime\n  } = _ref;\n  const [statusTime, setStatusTime] = useState(false);\n  const [statusQuote, setStatusQuote] = useState(true);\n  const [seconds, setSeconds] = useState(0);\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: userData.guessedKeys.has(letter) ? userData.guessedKeys.has(letter) && userData.quote.toLowerCase().includes(letter) ? \"p-2 bg-green-900 text-black rounded-full cursor:pointer\" : \"p-2 bg-yellow-500 text-black rounded-full cursor:pointer\" : \"p-2 bg-white text-black rounded-full cursor:pointer hover:bg-yellow-100\",\n      value: letter,\n      disabled: userData.guessedKeys.has(letter),\n      onClick: handleGuess,\n      children: letter\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this));\n  };\n\n  useEffect(() => {\n    if (statusQuote) {\n      setStatusQuote(false);\n      fetchQuote();\n    }\n\n    if (statusTime) {\n      let myInterval = setInterval(() => {\n        setSeconds(seconds + 1000);\n      }, 1000);\n      return () => {\n        clearInterval(myInterval);\n      };\n    }\n  }, []); //FETCH QUOTE DONE\n  //HANDLE GUESS DONE\n\n  const handleGuess = e => {\n    setStatusTime(true); //dodavanje novih elemenata u set([])\n    //KORISTENJE SETA JER NEMA DUPLIKATA\n\n    let guessedArray = userData.guessedKeys;\n    guessedArray.add(e.target.value);\n    addGuess(guessedArray);\n    addMisstake(userData.quote.toLowerCase().includes(e.target.value) ? 0 : 1);\n    /*console.log(\"Misstakes: \", userData.misstakes);\n    updateScore(userData.misstakes);\n    getUpdatedScore();\n    console.log(\"New score:\", userData.score);*/\n  }; //GUESSING GAME DONE\n\n\n  const guessingGame = () => {\n    console.log(userData.quote);\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map(letter => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) || guessedLetters.has(letter.toUpperCase()) ? letter : \" _ \";\n      } else {\n        return letter === \" \" ? \"     \" : letter;\n      }\n    });\n    return lines;\n  };\n\n  const resetGame = () => {\n    resetGameAndData();\n    fetchQuote();\n  };\n\n  const guessingGame2 = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map(letter => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) || guessedLetters.has(letter.toUpperCase()) ? letter : \"_\";\n      } else {\n        return letter === \" \" ? \" \" : letter;\n      }\n    });\n    return lines;\n  };\n\n  const getPicture = () => {\n    if (userData.misstakes === 6) {\n      return 8;\n    } else if (guessingGame2().join(\"\") === userData.quote) {\n      return 7;\n    } else {\n      return userData.misstakes;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white h-screen\",\n    children: !userData.username ? /*#__PURE__*/_jsxDEV(UserSetup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center pt-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[getPicture()],\n          className: \"w-1/5 \",\n          alt: \"hangmangame\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pl-10 \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Username: \", userData.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Score: \", Math.round(100 / (1 + userData.misstakes)), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Time: \", statusTime / 1000]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Misstakes: \", userData.misstakes, \" of 6\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), guessingGame2().join(\"\") === userData.quote ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/3 p-5 text-[20px] m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n          children: [\"YOU WON AND YOUR SCORE IS BEING SAVED!\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"justify-center items-center p-4 rounded-full flex space-x-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-7 h-7 mr-3 bg-white animate-spin \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this) : guessingGame2().join(\"\") !== userData.quote && userData.misstakes === 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/3 p-5 text-[32px] m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n          children: \"YOU LOST!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-1/3 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \" align-center  text-[20px] ix:text-[12px]\",\n              children: userData.quote ? guessingGame() : \"Loading ...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-auto bg-gray-900\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-7 text-center\",\n              children: createKeys()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-screen mt-10 h-10 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-1/5 bg-yellow-500 rounded border-solid border-2 border-black shadow drop-shadow hover:bg-yellow-400\",\n          onClick: resetGame,\n          children: [\" \", \"RESET\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HangmanLogic, \"x7/+vXCEl1qwWQlBUbNWuMnI/DA=\");\n\n_c = HangmanLogic;\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchQuote: () => dispatch(fetchQuote()),\n    addGuess: letter => dispatch(addGuess(letter)),\n    addMisstake: value => dispatch(addMisstake(value)),\n    resetGameAndData: () => dispatch(resetGameAndData()),\n    updateScore: value => dispatch(updateScore(value)),\n    updateTime: value => dispatch(updateTime(value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HangmanLogic); //SETUP BOARD\n\n/**\n (\n            return {{guessingGame2().join(\"\") === userData.quote ? (<div>you won</div>) : (<div>not yet</div>)}}\n          )}\n          \n          }(\n            <div>\n              <div className=\"flex mt-5\">\n                <div className=\"w-1/3 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                  <div className=\" align-center  text-[20px] ix:text-[12px]\">\n                    {userData.quote ? guessingGame() : \"Loading ...\"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex mt-5\">\n                <div className=\"m-auto bg-gray-900\">\n                  <div className=\"grid grid-cols-7 text-center\">\n                    {createKeys()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )} \n           */\n\n/**\n * <div className=\"bg-gray-900 text-white h-screen w-screen\">\n      {!userData.username ? (\n        <UserSetup />\n      ) : (\n        <div className=\"flex justify-center items-center pt-10\">\n          <img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n          <div className=\"pl-10 \">\n            <div>Username: {userData.username}</div>\n            <div>Score: </div>\n            <div>Time: </div>\n            <div>Misstakes: {userData.misstakes} of 6</div>\n          </div>\n          <div className=\"flex mt-5\">\n            <div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n              <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\">\n                {!userData.quote ? \"Loading ...\" : userData.quote}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex mt-5\">\n            <div className=\"m-auto bg-gray-900 text-center\">\n              <div className=\"grid grid-cols-7\">{createKeys()}</div>\n            </div>\n          </div>\n          <div className=\"w-screen mt-10 h-10 flex justify-center\">\n            <button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n              {\" \"}\n              RESET{\" \"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n */\n\n/*\n\n<div className=\"flex justify-center items-center pt-10\">\n<img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n<div className=\"pl-10 \">\n  <div>Username:</div>\n  <div>Score: </div>\n  <div>Time: </div>\n  <div>Misstakes: {userData.misstakes} of 6</div>\n</div>\n</div>\n<div className=\"flex mt-5\">\n<div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n  <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\">\n    {!userData.quote ? \"Loading ...\" : userData.quote}\n  </div>\n</div>\n</div>\n<div className=\"flex mt-5\">\n<div className=\"m-auto bg-gray-900 text-center\">\n  <div className=\"grid grid-cols-7\">{createKeys()}</div>\n</div>\n</div>\n<div className=\"w-screen mt-10 h-10 flex justify-center\">\n<button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n  {\" \"}\n  RESET{\" \"}\n</button>\n</div> }: \n*/\n\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) =<div className=\" flex justify-center items-center z-10\">\n              <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n            </div>> state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();<div className=\" flex justify-center items-center z-10\">\n              <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n            </div>\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n\n\n\n\n    import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\",\n});\n\nconst CreateComponents = () => {\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const data = async () => {\n      await api.get().then((res) => {\n        return res.data.content;\n      });\n    };\n    setQuote(data);\n    setLoading(false);\n  }, []);\n\n  return { quote, loading };\n};\n  };*/\n\nvar _c;\n\n$RefreshReg$(_c, \"HangmanLogic\");","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js"],"names":["React","useEffect","useState","UserSetup","images","connect","fetchQuote","addGuess","addMisstake","resetGameAndData","updateScore","updateTime","HangmanLogic","userData","statusTime","setStatusTime","statusQuote","setStatusQuote","seconds","setSeconds","createKeys","split","map","letter","guessedKeys","has","quote","toLowerCase","includes","handleGuess","myInterval","setInterval","clearInterval","e","guessedArray","add","target","value","guessingGame","console","log","guessedLetters","lines","test","toUpperCase","resetGame","guessingGame2","getPicture","misstakes","join","username","Math","round","mapStateToProps","state","user","mapDispatchToProps","dispatch"],"mappings":"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":["import React, { useEffect, useState } from \"react\";\n\nimport UserSetup from \"./UserSetup\";\nimport { images } from \"./images/images\";\n\nimport { connect } from \"react-redux\";\nimport {\n  fetchQuote,\n  addGuess,\n  addMisstake,\n  resetGameAndData,\n  updateScore,\n  updateTime,\n} from \"../redux/user/userActions\";\n\nfunction HangmanLogic({\n  userData,\n  fetchQuote,\n  addGuess,\n  addMisstake,\n  resetGameAndData,\n  updateScore,\n  updateTime,\n}) {\n  const [statusTime, setStatusTime] = useState(false);\n  const [statusQuote, setStatusQuote] = useState(true);\n  const [seconds, setSeconds] = useState(0);\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className={\n          userData.guessedKeys.has(letter)\n            ? userData.guessedKeys.has(letter) &&\n              userData.quote.toLowerCase().includes(letter)\n              ? \"p-2 bg-green-900 text-black rounded-full cursor:pointer\"\n              : \"p-2 bg-yellow-500 text-black rounded-full cursor:pointer\"\n            : \"p-2 bg-white text-black rounded-full cursor:pointer hover:bg-yellow-100\"\n        }\n        key={letter}\n        value={letter}\n        disabled={userData.guessedKeys.has(letter)}\n        onClick={handleGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n  useEffect(() => {\n    if (statusQuote) {\n      setStatusQuote(false);\n      fetchQuote();\n    }\n\n    if (statusTime) {\n      let myInterval = setInterval(() => {\n        setSeconds(seconds + 1000);\n      }, 1000);\n      return () => {\n        clearInterval(myInterval);\n      };\n    }\n  }, []);\n  //FETCH QUOTE DONE\n\n  //HANDLE GUESS DONE\n\n  const handleGuess = (e) => {\n    setStatusTime(true);\n    //dodavanje novih elemenata u set([])\n    //KORISTENJE SETA JER NEMA DUPLIKATA\n    let guessedArray = userData.guessedKeys;\n    guessedArray.add(e.target.value);\n    addGuess(guessedArray);\n    addMisstake(userData.quote.toLowerCase().includes(e.target.value) ? 0 : 1);\n    /*console.log(\"Misstakes: \", userData.misstakes);\n    updateScore(userData.misstakes);\n    getUpdatedScore();\n    console.log(\"New score:\", userData.score);*/\n  };\n\n  //GUESSING GAME DONE\n  const guessingGame = () => {\n    console.log(userData.quote);\n    let guessedLetters = userData.guessedKeys;\n\n    let lines = userData.quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) ||\n          guessedLetters.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"     \" : letter;\n      }\n    });\n    return lines;\n  };\n  const resetGame = () => {\n    resetGameAndData();\n    fetchQuote();\n  };\n  const guessingGame2 = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) ||\n          guessedLetters.has(letter.toUpperCase())\n          ? letter\n          : \"_\";\n      } else {\n        return letter === \" \" ? \" \" : letter;\n      }\n    });\n    return lines;\n  };\n  const getPicture = () => {\n    if (userData.misstakes === 6) {\n      return 8;\n    } else if (guessingGame2().join(\"\") === userData.quote) {\n      return 7;\n    } else {\n      return userData.misstakes;\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-900 text-white h-screen\">\n      {!userData.username ? (\n        <UserSetup />\n      ) : (\n        <div>\n          <div className=\"flex justify-center items-center pt-10\">\n            <img\n              src={images[getPicture()]}\n              className=\"w-1/5 \"\n              alt=\"hangmangame\"\n            />\n            <div className=\"pl-10 \">\n              <div>Username: {userData.username}</div>\n              <div>Score: {Math.round(100 / (1 + userData.misstakes))} </div>\n              <div>Time: {statusTime / 1000}</div>\n              <div>Misstakes: {userData.misstakes} of 6</div>\n            </div>\n          </div>\n          {guessingGame2().join(\"\") === userData.quote ? (\n            <div className=\"flex mt-5\">\n              <div className=\"w-1/3 p-5 text-[20px] m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                YOU WON AND YOUR SCORE IS BEING SAVED!\n                <div className=\"justify-center items-center p-4 rounded-full flex space-x-3\">\n                  <div className=\"w-7 h-7 mr-3 bg-white animate-spin \"></div>\n                </div>\n              </div>\n            </div>\n          ) : guessingGame2().join(\"\") !== userData.quote &&\n            userData.misstakes === 6 ? (\n            <div className=\"flex mt-5\">\n              <div className=\"w-1/3 p-5 text-[32px] m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                YOU LOST!\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div className=\"flex mt-5\">\n                <div className=\"w-1/3 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                  <div className=\" align-center  text-[20px] ix:text-[12px]\">\n                    {userData.quote ? guessingGame() : \"Loading ...\"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex mt-5\">\n                <div className=\"m-auto bg-gray-900\">\n                  <div className=\"grid grid-cols-7 text-center\">\n                    {createKeys()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"w-screen mt-10 h-10 flex justify-center\">\n            <button\n              className=\"w-1/5 bg-yellow-500 rounded border-solid border-2 border-black shadow drop-shadow hover:bg-yellow-400\"\n              onClick={resetGame}\n            >\n              {\" \"}\n              RESET{\" \"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userData: state.user,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuote: () => dispatch(fetchQuote()),\n    addGuess: (letter) => dispatch(addGuess(letter)),\n    addMisstake: (value) => dispatch(addMisstake(value)),\n    resetGameAndData: () => dispatch(resetGameAndData()),\n    updateScore: (value) => dispatch(updateScore(value)),\n    updateTime: (value) => dispatch(updateTime(value)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HangmanLogic);\n\n//SETUP BOARD\n/**\n (\n            return {{guessingGame2().join(\"\") === userData.quote ? (<div>you won</div>) : (<div>not yet</div>)}}\n          )}\n          \n          }(\n            <div>\n              <div className=\"flex mt-5\">\n                <div className=\"w-1/3 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                  <div className=\" align-center  text-[20px] ix:text-[12px]\">\n                    {userData.quote ? guessingGame() : \"Loading ...\"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex mt-5\">\n                <div className=\"m-auto bg-gray-900\">\n                  <div className=\"grid grid-cols-7 text-center\">\n                    {createKeys()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )} \n           */\n\n/**\n * <div className=\"bg-gray-900 text-white h-screen w-screen\">\n      {!userData.username ? (\n        <UserSetup />\n      ) : (\n        <div className=\"flex justify-center items-center pt-10\">\n          <img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n          <div className=\"pl-10 \">\n            <div>Username: {userData.username}</div>\n            <div>Score: </div>\n            <div>Time: </div>\n            <div>Misstakes: {userData.misstakes} of 6</div>\n          </div>\n          <div className=\"flex mt-5\">\n            <div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n              <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\">\n                {!userData.quote ? \"Loading ...\" : userData.quote}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex mt-5\">\n            <div className=\"m-auto bg-gray-900 text-center\">\n              <div className=\"grid grid-cols-7\">{createKeys()}</div>\n            </div>\n          </div>\n          <div className=\"w-screen mt-10 h-10 flex justify-center\">\n            <button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n              {\" \"}\n              RESET{\" \"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n */\n\n/*\n\n<div className=\"flex justify-center items-center pt-10\">\n<img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n<div className=\"pl-10 \">\n  <div>Username:</div>\n  <div>Score: </div>\n  <div>Time: </div>\n  <div>Misstakes: {userData.misstakes} of 6</div>\n</div>\n</div>\n<div className=\"flex mt-5\">\n<div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n  <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\">\n    {!userData.quote ? \"Loading ...\" : userData.quote}\n  </div>\n</div>\n</div>\n<div className=\"flex mt-5\">\n<div className=\"m-auto bg-gray-900 text-center\">\n  <div className=\"grid grid-cols-7\">{createKeys()}</div>\n</div>\n</div>\n<div className=\"w-screen mt-10 h-10 flex justify-center\">\n<button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n  {\" \"}\n  RESET{\" \"}\n</button>\n</div> }: \n*/\n\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) =<div className=\" flex justify-center items-center z-10\">\n              <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n            </div>> state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();<div className=\" flex justify-center items-center z-10\">\n              <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900\"></div>\n            </div>\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n\n\n\n\n    import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\",\n});\n\nconst CreateComponents = () => {\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const data = async () => {\n      await api.get().then((res) => {\n        return res.data.content;\n      });\n    };\n    setQuote(data);\n    setLoading(false);\n  }, []);\n\n  return { quote, loading };\n};\n  };*/\n"]},"metadata":{},"sourceType":"module"}