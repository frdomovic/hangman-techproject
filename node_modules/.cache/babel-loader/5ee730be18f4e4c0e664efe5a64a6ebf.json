{"ast":null,"code":"var _jsxFileName = \"/home/chill/Desktop/hangman-ingemark/src/components/TimeCounter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { updateTime } from \"../redux/user/userActions\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TimeCounter(_ref, props) {\n  _s();\n\n  let {\n    userData,\n    updateTime\n  } = _ref;\n  //const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState(false);\n  useEffect(() => {\n    if (props.status) {\n      let myInterval = setInterval(() => {\n        updateTime(1000);\n      }, 1000);\n      return () => {\n        clearInterval(myInterval);\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"TU SAM \", props]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TimeCounter, \"iW7PMEIJc8b9DQPigLoTVxHyUqc=\");\n\n_c = TimeCounter;\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateTime: value => dispatch(updateTime(value))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimeCounter);\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeCounter\");","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/components/TimeCounter.js"],"names":["React","useEffect","useState","updateTime","connect","TimeCounter","props","userData","status","setStatus","myInterval","setInterval","clearInterval","mapStateToProps","state","user","mapDispatchToProps","dispatch","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AACA,SAASC,WAAT,OAA+CC,KAA/C,EAAsD;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,QAAF;AAAYJ,IAAAA;AAAZ,GAAiC;AACpD;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,KAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,KAAK,CAACE,MAAV,EAAkB;AAChB,UAAIE,UAAU,GAAGC,WAAW,CAAC,MAAM;AACjCR,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAF2B,EAEzB,IAFyB,CAA5B;AAGA,aAAO,MAAM;AACXS,QAAAA,aAAa,CAACF,UAAD,CAAb;AACD,OAFD;AAGD;AACF,GATQ,CAAT;AAWA,sBAAO;AAAA,0BAAaJ,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAhBQD,W;;KAAAA,W;;AAiBT,MAAMQ,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLP,IAAAA,QAAQ,EAAEO,KAAK,CAACC;AADX,GAAP;AAGD,CAJD;;AAKA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLd,IAAAA,UAAU,EAAGe,KAAD,IAAWD,QAAQ,CAACd,UAAU,CAACe,KAAD,CAAX;AAD1B,GAAP;AAGD,CAJD;;AAKA,eAAed,OAAO,CAACS,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CX,WAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { updateTime } from \"../redux/user/userActions\";\nimport { connect } from \"react-redux\";\nfunction TimeCounter({ userData, updateTime }, props) {\n  //const [seconds, setSeconds] = useState(0);\n  const [status, setStatus] = useState(false);\n\n  useEffect(() => {\n    if (props.status) {\n      let myInterval = setInterval(() => {\n        updateTime(1000);\n      }, 1000);\n      return () => {\n        clearInterval(myInterval);\n      };\n    }\n  });\n\n  return <div>TU SAM {props}</div>;\n}\nconst mapStateToProps = (state) => {\n  return {\n    userData: state.user,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateTime: (value) => dispatch(updateTime(value)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TimeCounter);\n"]},"metadata":{},"sourceType":"module"}