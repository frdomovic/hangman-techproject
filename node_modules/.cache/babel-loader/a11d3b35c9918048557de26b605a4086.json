{"ast":null,"code":"var _jsxFileName = \"/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport start0 from \"./images/start0.png\";\nimport start1 from \"./images/start1.png\";\nimport start2 from \"./images/start2.png\";\nimport start3 from \"./images/start3.png\";\nimport start4 from \"./images/start4.png\";\nimport start5 from \"./images/start5.png\";\nimport start6 from \"./images/start6.png\";\nimport win from \"./images/win.png\";\nimport lost from \"./images/lost.png\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actionCreators } from \"../state/index\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\"\n});\n\nconst createComponents = () => {\n  _s();\n\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(async () => {\n    const data = await api.get().then(res => {\n      return res.data.content;\n    });\n    setQuote(data);\n    setLoading(false);\n  }, []);\n  return {\n    quote,\n    loading\n  };\n};\n\n_s(createComponents, \"YLwR47B7BSLcbca4tOPhAdX0qIE=\");\n\nexport default function HangmanLogic() {\n  const [quote, loading] = createComponents();\n  /*const misstakes = useSelector((state) => state.misstakes);\n   const startingStates = {\n    maxMisstakes: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n    quote: \"\"\n  };\n   useEffect(() => {\n    const fetchData = async () => {\n      const data = await api.get().then((res) => {\n        return res.data.content;\n      });\n      startingStates.quote = data;\n    };\n    fetchData();\n  }, []);\n   const resetGame = () => {};\n  const createguess = () => {};\n  const createlayout = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={createguess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center pt-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: start0,\n        className: \"w-1/5 \",\n        alt: \"hangmangame\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pl-10 \",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Score: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Time: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Misstakes: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" align-center  text-[20px] ix:text-[12px]\",\n          children: loading ? \"loading\" : {\n            quote\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-auto bg-gray-900 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-7\",\n          children: createlayout()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-1/2 mt-3 bg-black rounded text-white border-solid border-2  border-red\",\n          children: [\" \", \"RESET\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) => state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n  };*/\n\n_c = HangmanLogic;\n\nvar _c;\n\n$RefreshReg$(_c, \"HangmanLogic\");","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js"],"names":["React","useEffect","useState","start0","start1","start2","start3","start4","start5","start6","win","lost","useSelector","useDispatch","bindActionCreators","actionCreators","axios","api","create","baseURL","createComponents","quote","setQuote","loading","setLoading","data","get","then","res","content","HangmanLogic","createlayout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport start0 from \"./images/start0.png\";\nimport start1 from \"./images/start1.png\";\nimport start2 from \"./images/start2.png\";\nimport start3 from \"./images/start3.png\";\nimport start4 from \"./images/start4.png\";\nimport start5 from \"./images/start5.png\";\nimport start6 from \"./images/start6.png\";\nimport win from \"./images/win.png\";\nimport lost from \"./images/lost.png\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actionCreators } from \"../state/index\";\n\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\",\n});\n\nconst createComponents = () => {\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(async () => {\n    const data = await api.get().then((res) => {\n      return res.data.content;\n    });\n    setQuote(data);\n    setLoading(false);\n  }, []);\n\n  return { quote, loading };\n};\n\nexport default function HangmanLogic() {\n  const [quote, loading] = createComponents();\n\n  /*const misstakes = useSelector((state) => state.misstakes);\n\n  const startingStates = {\n    maxMisstakes: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n    quote: \"\"\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await api.get().then((res) => {\n        return res.data.content;\n      });\n      startingStates.quote = data;\n    };\n    fetchData();\n  }, []);\n\n  const resetGame = () => {};\n  const createguess = () => {};\n  const createlayout = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={createguess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n  */\n  return (\n    <div className=\"bg-gray-900 text-white h-screen\">\n      <div className=\"flex justify-center items-center pt-10\">\n        <img src={start0} className=\"w-1/5 \" alt=\"hangmangame\" />\n        <div className=\"pl-10 \">\n          <div>Username:</div>\n          <div>Score: </div>\n          <div>Time: </div>\n          <div>Misstakes: </div>\n        </div>\n      </div>\n      <div className=\"flex mt-5\">\n        {}\n        <div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n          <div className=\" align-center  text-[20px] ix:text-[12px]\">\n            {loading ? \"loading\" : { quote }}\n          </div>\n        </div>\n      </div>\n      <div className=\"flex mt-5\">\n        <div className=\"m-auto bg-gray-900 text-center\">\n          <div className=\"grid grid-cols-7\">{createlayout()}</div>\n          <button\n            className=\"w-1/2 mt-3 bg-black rounded text-white border-solid border-2 \n          border-red\"\n          >\n            {\" \"}\n            RESET{\" \"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) => state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n  };*/\n"]},"metadata":{},"sourceType":"module"}