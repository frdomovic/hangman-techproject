{"ast":null,"code":"var _jsxFileName = \"/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js\";\nimport React from \"react\";\nimport UserSetup from \"./UserSetup\";\nimport { useEffect, useState } from \"react\";\nimport { images } from \"./images\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actionCreators } from \"../state/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class HangmanLogic extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(UserSetup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n    /*\n    <div className=\"bg-gray-900 text-white h-screen\">\n      <div className=\"flex justify-center items-center pt-10\">\n        <img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n        <div className=\"pl-10 \">\n          <div>Username:</div>\n          <div>Score: </div>\n          <div>Time: </div>\n          <div>Misstakes: </div>\n        </div>\n      </div>\n      <div className=\"flex mt-5\">\n        {}\n        <div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n          <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\"></div>\n        </div>\n      </div>\n      <div className=\"flex mt-5\">\n        <div className=\"m-auto bg-gray-900 text-center\">\n          <div className=\"grid grid-cols-7\">{}</div>\n        </div>\n      </div>\n      <div class=\"w-screen h-10 flex justify-center\">\n        <button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n          {\" \"}\n          RESET{\" \"}\n        </button>\n      </div>\n    </div>*/\n    ;\n  }\n\n}\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) => state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n\n\n\n\n    import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\",\n});\n\nconst CreateComponents = () => {\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const data = async () => {\n      await api.get().then((res) => {\n        return res.data.content;\n      });\n    };\n    setQuote(data);\n    setLoading(false);\n  }, []);\n\n  return { quote, loading };\n};\n  };*/","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js"],"names":["React","UserSetup","useEffect","useState","images","useSelector","useDispatch","bindActionCreators","actionCreators","HangmanLogic","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,cAAT,QAA+B,gBAA/B;;AAEA,eAAe,MAAMC,YAAN,SAA2BT,KAAK,CAACU,SAAjC,CAA2C;AACxDC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BI;AAgCD;;AAlCuD;AAqsourcesContent":["import React from \"react\";\n\nimport UserSetup from \"./UserSetup\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { images } from \"./images\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actionCreators } from \"../state/index\";\n\nexport default class HangmanLogic extends React.Component {\n  render() {\n    return (\n      <UserSetup />\n      /*\n      <div className=\"bg-gray-900 text-white h-screen\">\n        <div className=\"flex justify-center items-center pt-10\">\n          <img src={images[0]} className=\"w-1/5 \" alt=\"hangmangame\" />\n          <div className=\"pl-10 \">\n            <div>Username:</div>\n            <div>Score: </div>\n            <div>Time: </div>\n            <div>Misstakes: </div>\n          </div>\n        </div>\n        <div className=\"flex mt-5\">\n          {}\n          <div className=\"w-1/3 p-5 ix:w-screen m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n            <div className=\"keyboardbuttons align-center  text-[20px] ix:text-[12px]\"></div>\n          </div>\n        </div>\n        <div className=\"flex mt-5\">\n          <div className=\"m-auto bg-gray-900 text-center\">\n            <div className=\"grid grid-cols-7\">{}</div>\n          </div>\n        </div>\n        <div class=\"w-screen h-10 flex justify-center\">\n          <button className=\"w-1/5 bg-orange-400 rounded border-solid border-2 border-white shadow drop-shadow\">\n            {\" \"}\n            RESET{\" \"}\n          </button>\n        </div>\n      </div>*/\n    );\n  }\n}\n\n/*\nconst player = useSelector((state) => state.player);\n  const misstakeCounter = useSelector((state) => state.misstakes);\n  const quoteState = useSelector((state) => state.trueQuote);\n  const guessedState = useSelector((state) => state.guessed);\n\n  const [guessWords, setGuessWords] = useState(\"\");\n\n  const [board, setBoard] = useState([]);\n  const [quote, setQuote] = useState(\"\");\n\n  const [missT, setMissT] = useState(0);\n  const [gchars, setGchars] = useState(new Set([]));\n\n  //LOCAL STATE CONSTS FOR SCREEN UPDATE\n  const props = {\n    maxWrong: 6,\n    images: [start0, start1, start2, start3, start4, start5, start6, win, lost],\n  };\n\n  const dispatch = useDispatch();\n  //REDUX FUNCTIONS FOR UPDATING STATES\n  //ADDING MISSTAKE 0 OR 1\n  //ADDING GUESS - ADDS LETTER TO SET OF GUESSED LETTERS\n  //ADDQUOTE - ADDS QUOTE\n  //RESETGUESS - CREATES NEW EMPTY SET ( NEW SET([]))\n  //RESETMISSTAKES - CHANGES STATE TO 0\n  const { addMisstake, addGuess, addQuote, resetGuess, resetMisstakes } =\n    bindActionCreators(actionCreators, dispatch);\n\n  //RUN ONCE THE PAGE LOADS AND DONT RUN AGAIN\n\n  useEffect(() => {\n    //SETTING UP LETTER BUTTON BOARD\n    setBoard(createKeys());\n    //GETTING RANDOM QUOTE FROM API\n    const getQuote = async () => {\n      let line = await api.get().then((res) => {\n        return res.data.content;\n      });\n      setQuote(line);\n    };\n    getQuote();\n    guessingGame();\n  }, []);\n\n  //FUNCTION FOR MAPPING OVER FETCHED SENTENCE AND RETURNING IT\n  //AS \"_\" FOR LETTERS THAT HAVE NOT BEEN GUESSED\n  //FIRST IF CHECK IF THE LETTER IS ALPHA BECAUSE OTHER SYMBOLS\n  //DONT GET FLAGGED WITH \"_\"\n  const guessingGame = () => {\n    let lines = quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return gchars.has(letter.toLowerCase()) ||\n          gchars.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"    \" : letter;\n      }\n    });\n    setGuessWords(lines);\n    return lines;\n  };\n\n  //FUNCTION THAT GETS TRIGGERED BY BUTTON CLICK\n  //IT PUSHES LETTER TO SET OF GUESSED LETTERS\n  //IT ALSO SHOULD INCREMENT MISSTAKES IF LETTER IS NOT IN\n  //QUOTE\n  //DELAYED SETUP OF VALUES ?\n\n  const CreateGuess = (e) => {\n    let temp = gchars;\n    temp.add(e.target.value);\n    //LOCAL HOOKS THAT HOLD GUESSED LETTERS\n    setGchars(temp);\n    //REDUX STATE FUNCTION TO CHANGE SET AND UPDATE IT WITH NEW VALUE\n    addGuess(e.target.value);\n    //IT ALWAYS DOES STATE-1 FOR SOMEREASON IN THIS ENVIRONMENT\n    //FOR OTHER THINGS GCHARS IS UPTO DATE AND USED\n    addMisstake(String(quote).toLowerCase().includes(e.target.value) ? 0 : 1);\n    guessingGame();\n    console.log(e.target.className);\n  };\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className=\"m-2 p-2 bg-white text-black rounded-full\"\n        key={letter}\n        value={letter}\n        onClick={CreateGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n\n  const resetGame = async () => {\n    await api.get().then((res) => {\n      setQuote(res.data.content);\n    });\n    //GETS SET() FROM HOOKS AND CLEARS IT\n    //SETS IT AGAIN AS THE NEW VALUE\n    let a = gchars;\n    a.clear();\n    setGchars(a);\n    //RESETS REDUX STATES\n    addQuote(quote);\n    resetGuess();\n    resetMisstakes();\n    guessingGame();\n\n\n\n\n    import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.quotable.io/random\",\n});\n\nconst CreateComponents = () => {\n  const [quote, setQuote] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const data = async () => {\n      await api.get().then((res) => {\n        return res.data.content;\n      });\n    };\n    setQuote(data);\n    setLoading(false);\n  }, []);\n\n  return { quote, loading };\n};\n  };*/\n"]},"metadata":{},"sourceType":"module"}