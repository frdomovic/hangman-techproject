{"ast":null,"code":"var _jsxFileName = \"/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport UserSetup from \"./UserSetup\";\nimport { images } from \"./images/images\";\nimport { connect } from \"react-redux\";\nimport { fetchQuote, addGuess, addMisstake, resetGameAndData, updateTime, savingDataStatus } from \"../redux/user/userActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = \"https://my-json-server.typicode.com/stanko-ingemark/hang_the_wise_man_frontend_task/highscores\";\n\nfunction HangmanLogic(_ref) {\n  _s();\n\n  let {\n    userData,\n    fetchQuote,\n    addGuess,\n    addMisstake,\n    resetGameAndData,\n    updateTime,\n    savingDataStatus\n  } = _ref;\n  //FETCHES GAME QUOTE WHEN PAGE LOADS\n  useEffect(() => {\n    fetchQuote();\n  }, []); //STARTS WHEN PAGE LOADS, UPDATES GAME TIME EVERY 1000MS AND\n  //CALLS FUNCTION UPDATETIMER() FOR HANDLING UPDATE\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateTimer();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [userData.username, userData.misstakes, userData.savingdata]); //CREATES BUTTON LAYOUT FOR ALL LETTERS WE CAN USE\n  //FUNCTIONALITIES FOR CHANGING COLLORS ON HOVER(YELLOW-100) , RIGHT GUESS(GREEN-900), WRONG GUESS(YELLOW-500)\n  //CLICKED BUTTON CALLS \"HANGLEGUESS()\" FUNCTION TO HANGLE STATE CHANGES\n\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: userData.guessedKeys.has(letter) ? userData.guessedKeys.has(letter) && userData.quote.toLowerCase().includes(letter) ? \"p-2 bg-green-900 text-black rounded-full cursor:pointer\" : \"p-2 bg-yellow-500 text-black rounded-full cursor:pointer\" : \"p-2 bg-white text-black rounded-full cursor:pointer hover:bg-yellow-100\",\n      value: letter,\n      disabled: userData.guessedKeys.has(letter),\n      onClick: handleGuess,\n      children: letter\n    }, letter, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n  }; //TAKES FETCHED QUOTE, TRANSFORMS IT TO A STRING ARRAY\n  //ARRAY IS FILTERED TO REMOVE DUPLICATES\n\n\n  const getUniqueLetters = () => {\n    let uniqueLetters = userData.quote.split(\"\").filter((item, i, arr) => {\n      if (/[a-zA-Z]/.test(item)) {\n        return arr.indexOf(item) === i;\n      }\n    });\n    return uniqueLetters.length;\n  }; //FUNCTION THAT IS EXECUTED EVERY 1000MS\n  //UPDATES STATE OF THE TIME VALUE\n  //AFTER THE GAME IS OVER, AND THE PLAYER WON\n  //HIS SCORE IS BEING SAVED WITH AXIOS POST METHOD TO API\n  // QUOTE_ID (STRING), LENGTH OF QUOTE (INT), UNIQUE_CHARACTERS(INT),\n  //USERNAME (STRING), ERRORS (INT)\n\n\n  async function updateTimer() {\n    if (userData.quote !== \"\" && guessedsentence().join(\"\") === userData.quote && !userData.savingdata) {\n      savingDataStatus();\n      await axios.post(api, {\n        quoteId: userData.id,\n        length: userData.lengthq,\n        uniqueCharacters: getUniqueLetters(),\n        userName: userData.username,\n        errors: userData.misstakes\n      }, {\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }).then(res => {\n        console.log(res);\n      }).catch(error => {\n        console.log(error);\n      });\n    } else if (userData.username && userData.misstakes !== 6 && !userData.savingdata) {\n      updateTime(1000);\n    }\n  } //CALLED AFTER PLAYER CLICKS ON LETTER BUTTON\n  //ADDS CLICKED LETTER VALUE TO STATE OF GUESSED LETTERS\n  //IF LETTER IS NOT IN QUOTE INCREMENTS MISSTAKE STATE BY 1\n\n\n  const handleGuess = e => {\n    getUniqueLetters();\n    console.log(userData.quote);\n    let guessedArray = userData.guessedKeys;\n    guessedArray.add(e.target.value);\n    addGuess(guessedArray);\n    addMisstake(userData.quote.toLowerCase().includes(e.target.value) ? 0 : 1);\n  }; //TAKES FETCHED QUOTE FROM API TURNS IT TO A STRING ARRAY\n  //AND MAPS IT A WAY THAT GUESSED LETTER ARE SHOWN AND OTHERS ARE NOT\n\n\n  const guessingGame = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map(letter => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) || guessedLetters.has(letter.toUpperCase()) ? letter : \" _ \";\n      } else {\n        return letter === \" \" ? \"     \" : letter;\n      }\n    });\n    return lines;\n  }; //FUNCTION USED TO TEST IF PLAYER GUESSED WHOLE SENTENCE AND WON THE GAME\n\n\n  const guessedsentence = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map(letter => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) || guessedLetters.has(letter.toUpperCase()) ? letter : \"_\";\n      } else {\n        return letter;\n      }\n    });\n    return lines;\n  }; //CHANGES PICTURE OF HANGMAN DEPENDING ON GAME STATUS\n  //IF GAME IS RUNNING - PICTURES ARRAY 0-6\n  //IF LOST PICTURES ARRAY 8\n  //IF WON PICTURES ARRAY 7\n\n\n  const getPicture = () => {\n    if (userData.misstakes === 6) {\n      return 8;\n    } else if (guessedsentence().join(\"\") === userData.quote) {\n      return 7;\n    } else {\n      return userData.misstakes;\n    }\n  }; //FETCHES NEW QUOTE AND RESTARTS STATES AND USER DATA\n\n\n  const resetGame = () => {\n    resetGameAndData();\n    fetchQuote();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-white h-screen\",\n    children: !userData.username ? /*#__PURE__*/_jsxDEV(UserSetup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center pt-10\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[getPicture()],\n          className: \"w-1/5 \",\n          alt: \"hangmangame\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pl-10 \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Username:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-yellow-500\",\n              children: userData.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Score:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-yellow-500\",\n              children: Math.round((userData.quote.length + getUniqueLetters()) * 100 / (userData.misstakes + userData.time / 1000 + 1))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Time:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-yellow-500\",\n              children: Math.round(userData.time / 1000)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, this), \" \", \"sec\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Misstakes:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-yellow-500\",\n              children: userData.misstakes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), \" of 6\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), guessedsentence().join(\"\") === userData.quote ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/3 p-5 text-[20px] m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n          children: [\"YOU WON, SCORE SAVED!\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"justify-center items-center p-4 rounded-full flex space-x-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-7 h-7 mr-3 bg-white animate-spin \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this) : guessedsentence().join(\"\") !== userData.quote && userData.misstakes === 6 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-1/3 p-5 text-[32px] m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n          children: \"YOU LOST!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-1/3 ix:w-6/12 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \" align-center text-[20px] ix:text-[12px]\",\n              children: userData.quote ? guessingGame() : \"Loading ...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex mt-5\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-auto bg-gray-900\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-7 text-center justify-center\",\n              children: createKeys()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-10 h-10 flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-1/5 bg-yellow-500 rounded border-solid border-2 border-black shadow drop-shadow hover:bg-yellow-400\",\n          onClick: resetGame,\n          children: [\" \", \"RESET\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HangmanLogic, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = HangmanLogic;\n\nconst mapStateToProps = state => {\n  return {\n    userData: state.user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchQuote: () => dispatch(fetchQuote()),\n    addGuess: value => dispatch(addGuess(value)),\n    addMisstake: value => dispatch(addMisstake(value)),\n    resetGameAndData: () => dispatch(resetGameAndData()),\n    updateTime: value => dispatch(updateTime(value)),\n    savingDataStatus: () => dispatch(savingDataStatus())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HangmanLogic);\n\nvar _c;\n\n$RefreshReg$(_c, \"HangmanLogic\");","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/components/HangmanLogic.js"],"names":["React","useEffect","useState","axios","UserSetup","images","connect","fetchQuote","addGuess","addMisstake","resetGameAndData","updateTime","savingDataStatus","api","HangmanLogic","userData","intervalId","setInterval","updateTimer","clearInterval","username","misstakes","savingdata","createKeys","split","map","letter","guessedKeys","has","quote","toLowerCase","includes","handleGuess","getUniqueLetters","uniqueLetters","filter","item","i","arr","test","indexOf","length","guessedsentence","join","post","quoteId","id","lengthq","uniqueCharacters","userName","errors","headers","then","res","console","log","catch","error","e","guessedArray","add","target","value","guessingGame","guessedLetters","lines","toUpperCase","getPicture","resetGame","Math","round","time","mapStateToProps","state","user","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport UserSetup from \"./UserSetup\";\nimport { images } from \"./images/images\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchQuote,\n  addGuess,\n  addMisstake,\n  resetGameAndData,\n  updateTime,\n  savingDataStatus,\n} from \"../redux/user/userActions\";\n\nconst api =\n  \"https://my-json-server.typicode.com/stanko-ingemark/hang_the_wise_man_frontend_task/highscores\";\n\nfunction HangmanLogic({\n  userData,\n  fetchQuote,\n  addGuess,\n  addMisstake,\n  resetGameAndData,\n  updateTime,\n  savingDataStatus,\n}) {\n  //FETCHES GAME QUOTE WHEN PAGE LOADS\n  useEffect(() => {\n    fetchQuote();\n  }, []);\n\n  //STARTS WHEN PAGE LOADS, UPDATES GAME TIME EVERY 1000MS AND\n  //CALLS FUNCTION UPDATETIMER() FOR HANDLING UPDATE\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateTimer();\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [userData.username, userData.misstakes, userData.savingdata]);\n\n  //CREATES BUTTON LAYOUT FOR ALL LETTERS WE CAN USE\n  //FUNCTIONALITIES FOR CHANGING COLLORS ON HOVER(YELLOW-100) , RIGHT GUESS(GREEN-900), WRONG GUESS(YELLOW-500)\n  //CLICKED BUTTON CALLS \"HANGLEGUESS()\" FUNCTION TO HANGLE STATE CHANGES\n  const createKeys = () => {\n    return \"abcdefghijklmnoprstuvwzxyq\".split(\"\").map((letter) => (\n      <button\n        className={\n          userData.guessedKeys.has(letter)\n            ? userData.guessedKeys.has(letter) &&\n              userData.quote.toLowerCase().includes(letter)\n              ? \"p-2 bg-green-900 text-black rounded-full cursor:pointer\"\n              : \"p-2 bg-yellow-500 text-black rounded-full cursor:pointer\"\n            : \"p-2 bg-white text-black rounded-full cursor:pointer hover:bg-yellow-100\"\n        }\n        key={letter}\n        value={letter}\n        disabled={userData.guessedKeys.has(letter)}\n        onClick={handleGuess}\n      >\n        {letter}\n      </button>\n    ));\n  };\n  //TAKES FETCHED QUOTE, TRANSFORMS IT TO A STRING ARRAY\n  //ARRAY IS FILTERED TO REMOVE DUPLICATES\n  const getUniqueLetters = () => {\n    let uniqueLetters = userData.quote.split(\"\").filter((item, i, arr) => {\n      if (/[a-zA-Z]/.test(item)) {\n        return arr.indexOf(item) === i;\n      }\n    });\n    return uniqueLetters.length;\n  };\n\n  //FUNCTION THAT IS EXECUTED EVERY 1000MS\n  //UPDATES STATE OF THE TIME VALUE\n  //AFTER THE GAME IS OVER, AND THE PLAYER WON\n  //HIS SCORE IS BEING SAVED WITH AXIOS POST METHOD TO API\n  // QUOTE_ID (STRING), LENGTH OF QUOTE (INT), UNIQUE_CHARACTERS(INT),\n  //USERNAME (STRING), ERRORS (INT)\n  async function updateTimer() {\n    if (\n      userData.quote !== \"\" &&\n      guessedsentence().join(\"\") === userData.quote &&\n      !userData.savingdata\n    ) {\n      savingDataStatus();\n      await axios\n        .post(\n          api,\n          {\n            quoteId: userData.id,\n            length: userData.lengthq,\n            uniqueCharacters: getUniqueLetters(),\n            userName: userData.username,\n            errors: userData.misstakes,\n          },\n          {\n            headers: {\n              \"Content-type\": \"application/json\",\n            },\n          }\n        )\n        .then((res) => {\n          console.log(res);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else if (\n      userData.username &&\n      userData.misstakes !== 6 &&\n      !userData.savingdata\n    ) {\n      updateTime(1000);\n    }\n  }\n  //CALLED AFTER PLAYER CLICKS ON LETTER BUTTON\n  //ADDS CLICKED LETTER VALUE TO STATE OF GUESSED LETTERS\n  //IF LETTER IS NOT IN QUOTE INCREMENTS MISSTAKE STATE BY 1\n  const handleGuess = (e) => {\n    getUniqueLetters();\n    console.log(userData.quote);\n    let guessedArray = userData.guessedKeys;\n    guessedArray.add(e.target.value);\n    addGuess(guessedArray);\n    addMisstake(userData.quote.toLowerCase().includes(e.target.value) ? 0 : 1);\n  };\n\n  //TAKES FETCHED QUOTE FROM API TURNS IT TO A STRING ARRAY\n  //AND MAPS IT A WAY THAT GUESSED LETTER ARE SHOWN AND OTHERS ARE NOT\n  const guessingGame = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) ||\n          guessedLetters.has(letter.toUpperCase())\n          ? letter\n          : \" _ \";\n      } else {\n        return letter === \" \" ? \"     \" : letter;\n      }\n    });\n    return lines;\n  };\n  //FUNCTION USED TO TEST IF PLAYER GUESSED WHOLE SENTENCE AND WON THE GAME\n\n  const guessedsentence = () => {\n    let guessedLetters = userData.guessedKeys;\n    let lines = userData.quote.split(\"\").map((letter) => {\n      if (/[a-zA-Z]/.test(letter)) {\n        return guessedLetters.has(letter.toLowerCase()) ||\n          guessedLetters.has(letter.toUpperCase())\n          ? letter\n          : \"_\";\n      } else {\n        return letter;\n      }\n    });\n    return lines;\n  };\n  //CHANGES PICTURE OF HANGMAN DEPENDING ON GAME STATUS\n  //IF GAME IS RUNNING - PICTURES ARRAY 0-6\n  //IF LOST PICTURES ARRAY 8\n  //IF WON PICTURES ARRAY 7\n  const getPicture = () => {\n    if (userData.misstakes === 6) {\n      return 8;\n    } else if (guessedsentence().join(\"\") === userData.quote) {\n      return 7;\n    } else {\n      return userData.misstakes;\n    }\n  };\n  //FETCHES NEW QUOTE AND RESTARTS STATES AND USER DATA\n  const resetGame = () => {\n    resetGameAndData();\n    fetchQuote();\n  };\n  return (\n    <div className=\"bg-gray-900 text-white h-screen\">\n      {!userData.username ? (\n        <UserSetup />\n      ) : (\n        <div>\n          <div className=\"flex justify-center items-center pt-10\">\n            <img\n              src={images[getPicture()]}\n              className=\"w-1/5 \"\n              alt=\"hangmangame\"\n            />\n            <div className=\"pl-10 \">\n              <div>\n                Username:{\" \"}\n                <span className=\"text-yellow-500\">{userData.username}</span>\n              </div>\n              <div>\n                Score:{\" \"}\n                <span className=\"text-yellow-500\">\n                  {Math.round(\n                    ((userData.quote.length + getUniqueLetters()) * 100) /\n                      (userData.misstakes + userData.time / 1000 + 1)\n                  )}\n                </span>\n              </div>\n              <div>\n                Time:{\" \"}\n                <span className=\"text-yellow-500\">\n                  {Math.round(userData.time / 1000)}\n                </span>{\" \"}\n                sec\n              </div>\n              <div>\n                Misstakes:{\" \"}\n                <span className=\"text-yellow-500\">{userData.misstakes}</span> of\n                6\n              </div>\n            </div>\n          </div>\n\n          {guessedsentence().join(\"\") === userData.quote ? (\n            <div className=\"flex mt-5\">\n              <div className=\"w-1/3 p-5 text-[20px] m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                YOU WON, SCORE SAVED!\n                <div className=\"justify-center items-center p-4 rounded-full flex space-x-3\">\n                  <div className=\"w-7 h-7 mr-3 bg-white animate-spin \"></div>\n                </div>\n              </div>\n            </div>\n          ) : guessedsentence().join(\"\") !== userData.quote &&\n            userData.misstakes === 6 ? (\n            <div className=\"flex mt-5\">\n              <div className=\"w-1/3 p-5 text-[32px] m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                YOU LOST!\n              </div>\n            </div>\n          ) : (\n            <div>\n              <div className=\"flex mt-5\">\n                <div className=\"w-1/3 ix:w-6/12 p-5 m-auto bg-gray-900 text-center whitespace-pre-wrap\">\n                  <div className=\" align-center text-[20px] ix:text-[12px]\">\n                    {userData.quote ? guessingGame() : \"Loading ...\"}\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex mt-5\">\n                <div className=\"m-auto bg-gray-900\">\n                  <div className=\"grid grid-cols-7 text-center justify-center\">\n                    {createKeys()}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"mt-10 h-10 flex justify-center\">\n            <button\n              className=\"w-1/5 bg-yellow-500 rounded border-solid border-2 border-black shadow drop-shadow hover:bg-yellow-400\"\n              onClick={resetGame}\n            >\n              {\" \"}\n              RESET{\" \"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userData: state.user,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuote: () => dispatch(fetchQuote()),\n    addGuess: (value) => dispatch(addGuess(value)),\n    addMisstake: (value) => dispatch(addMisstake(value)),\n    resetGameAndData: () => dispatch(resetGameAndData()),\n    updateTime: (value) => dispatch(updateTime(value)),\n    savingDataStatus: () => dispatch(savingDataStatus()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(HangmanLogic);\n"]},"metadata":{},"sourceType":"module"}