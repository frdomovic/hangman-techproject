{"ast":null,"code":"import { FETCH_QUOTE_FAILURE, FETCH_QUOTE_SUCCESS, FETCH_QUOTE_REQUEST, SET_PLAYER_USERNAME, ADD_NEW_GUESS, INCREMENT_MISSTAKE, RESET_GAME_AND_DATA, UPDATE_TIME, PUSHING_GAME_DATA_STATUS } from \"./userTypes\";\nconst initialState = {\n  loading: false,\n  quote: \"\",\n  id: \"\",\n  username: \"\",\n  time: 0,\n  guessedKeys: new Set([]),\n  misstakes: 0,\n  error: \"\",\n  lengthq: 0,\n  savingdata: false\n};\n\nconst userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_QUOTE_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case FETCH_QUOTE_SUCCESS:\n      return { ...state,\n        loading: false,\n        quote: action.payload.content,\n        id: action.payload._id,\n        lengthq: action.payload.content.length,\n        error: \"\"\n      };\n\n    case FETCH_QUOTE_FAILURE:\n      return { ...state,\n        loading: false,\n        quote: \"\",\n        error: action.payload\n      };\n\n    case SET_PLAYER_USERNAME:\n      return { ...state,\n        username: action.payload\n      };\n\n    case ADD_NEW_GUESS:\n      return { ...state,\n        guessedKeys: action.payload\n      };\n\n    case INCREMENT_MISSTAKE:\n      return { ...state,\n        misstakes: state.misstakes + action.payload\n      };\n\n    case RESET_GAME_AND_DATA:\n      return { ...state,\n        loading: false,\n        quote: \"\",\n        id: null,\n        username: \"\",\n        time: 0,\n        guessedKeys: new Set([]),\n        misstakes: 0,\n        error: \"\",\n        lengthq: 0,\n        savingdata: false\n      };\n\n    case UPDATE_TIME:\n      return { ...state,\n        time: state.time + action.payload\n      };\n\n    case PUSHING_GAME_DATA_STATUS:\n      return { ...state,\n        savingdata: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/home/chill/Desktop/hangman-ingemark/src/redux/user/userReducer.js"],"names":["FETCH_QUOTE_FAILURE","FETCH_QUOTE_SUCCESS","FETCH_QUOTE_REQUEST","SET_PLAYER_USERNAME","ADD_NEW_GUESS","INCREMENT_MISSTAKE","RESET_GAME_AND_DATA","UPDATE_TIME","PUSHING_GAME_DATA_STATUS","initialState","loading","quote","id","username","time","guessedKeys","Set","misstakes","error","lengthq","savingdata","userReducer","state","action","type","payload","content","_id","length"],"mappings":"AAAA,SACEA,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,mBAJF,EAKEC,aALF,EAMEC,kBANF,EAOEC,mBAPF,EAQEC,WARF,EASEC,wBATF,QAUO,aAVP;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,EAAE,EAAE,EAHe;AAInBC,EAAAA,QAAQ,EAAE,EAJS;AAKnBC,EAAAA,IAAI,EAAE,CALa;AAMnBC,EAAAA,WAAW,EAAE,IAAIC,GAAJ,CAAQ,EAAR,CANM;AAOnBC,EAAAA,SAAS,EAAE,CAPQ;AAQnBC,EAAAA,KAAK,EAAE,EARY;AASnBC,EAAAA,OAAO,EAAE,CATU;AAUnBC,EAAAA,UAAU,EAAE;AAVO,CAArB;;AAaA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBb,YAAyB;AAAA,MAAXc,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKtB,mBAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELZ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKT,mBAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAELZ,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAEY,MAAM,CAACE,OAAP,CAAeC,OAHjB;AAILd,QAAAA,EAAE,EAAEW,MAAM,CAACE,OAAP,CAAeE,GAJd;AAKLR,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAAP,CAAeC,OAAf,CAAuBE,MAL3B;AAMLV,QAAAA,KAAK,EAAE;AANF,OAAP;;AAQF,SAAKlB,mBAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAELZ,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAE,EAHF;AAILO,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAJT,OAAP;;AAMF,SAAKtB,mBAAL;AACE,aAAO,EACL,GAAGmB,KADE;AAELT,QAAAA,QAAQ,EAAEU,MAAM,CAACE;AAFZ,OAAP;;AAIF,SAAKrB,aAAL;AACE,aAAO,EACL,GAAGkB,KADE;AAELP,QAAAA,WAAW,EAAEQ,MAAM,CAACE;AAFf,OAAP;;AAIF,SAAKpB,kBAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELL,QAAAA,SAAS,EAAEK,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACE;AAF/B,OAAP;;AAIF,SAAKnB,mBAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELZ,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAE,EAHF;AAILC,QAAAA,EAAE,EAAE,IAJC;AAKLC,QAAAA,QAAQ,EAAE,EALL;AAMLC,QAAAA,IAAI,EAAE,CAND;AAOLC,QAAAA,WAAW,EAAE,IAAIC,GAAJ,CAAQ,EAAR,CAPR;AAQLC,QAAAA,SAAS,EAAE,CARN;AASLC,QAAAA,KAAK,EAAE,EATF;AAULC,QAAAA,OAAO,EAAE,CAVJ;AAWLC,QAAAA,UAAU,EAAE;AAXP,OAAP;;AAaF,SAAKb,WAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELR,QAAAA,IAAI,EAAEQ,KAAK,CAACR,IAAN,GAAaS,MAAM,CAACE;AAFrB,OAAP;;AAIF,SAAKjB,wBAAL;AACE,aAAO,EAAE,GAAGc,KAAL;AAAYF,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AAEF;AACE,aAAOE,KAAP;AA5DJ;AA8DD,CA/DD;;AAiEA,eAAeD,WAAf","sourcesContent":["import {\n  FETCH_QUOTE_FAILURE,\n  FETCH_QUOTE_SUCCESS,\n  FETCH_QUOTE_REQUEST,\n  SET_PLAYER_USERNAME,\n  ADD_NEW_GUESS,\n  INCREMENT_MISSTAKE,\n  RESET_GAME_AND_DATA,\n  UPDATE_TIME,\n  PUSHING_GAME_DATA_STATUS,\n} from \"./userTypes\";\n\nconst initialState = {\n  loading: false,\n  quote: \"\",\n  id: \"\",\n  username: \"\",\n  time: 0,\n  guessedKeys: new Set([]),\n  misstakes: 0,\n  error: \"\",\n  lengthq: 0,\n  savingdata: false,\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_QUOTE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_QUOTE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        quote: action.payload.content,\n        id: action.payload._id,\n        lengthq: action.payload.content.length,\n        error: \"\",\n      };\n    case FETCH_QUOTE_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        quote: \"\",\n        error: action.payload,\n      };\n    case SET_PLAYER_USERNAME:\n      return {\n        ...state,\n        username: action.payload,\n      };\n    case ADD_NEW_GUESS:\n      return {\n        ...state,\n        guessedKeys: action.payload,\n      };\n    case INCREMENT_MISSTAKE:\n      return {\n        ...state,\n        misstakes: state.misstakes + action.payload,\n      };\n    case RESET_GAME_AND_DATA:\n      return {\n        ...state,\n        loading: false,\n        quote: \"\",\n        id: null,\n        username: \"\",\n        time: 0,\n        guessedKeys: new Set([]),\n        misstakes: 0,\n        error: \"\",\n        lengthq: 0,\n        savingdata: false,\n      };\n    case UPDATE_TIME:\n      return {\n        ...state,\n        time: state.time + action.payload,\n      };\n    case PUSHING_GAME_DATA_STATUS:\n      return { ...state, savingdata: true };\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}